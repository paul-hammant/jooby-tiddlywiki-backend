buildscript {
    ext {
        kotlinVersion = '1.2.41'
        joobyVersion = '1.3.0'
        mapdbVersion = '3.0.5'

        junitPlatformVersion = "1.1.0"
        spekVersion = "1.1.5"
    }

    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.google.gradle:osdetector-gradle-plugin:1.4.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jooby:jooby-gradle-plugin:$joobyVersion"
    }
}

group 'wiki.tiddly'
version '1.0-SNAPSHOT'

apply plugin: "io.spring.dependency-management"
apply plugin: "com.google.osdetector"
apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "application"
apply plugin: "jooby"

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "https://dl.bintray.com/kotlin/ktor" }
}

dependencyManagement {
    imports {
        mavenBom "org.jooby:jooby-bom:$joobyVersion"
    }
}


sourceSets {
    integrationTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    serviceTest {
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    serviceTestCompile.extendsFrom testCompile
    serviceTestRuntime.extendsFrom testRuntime
}

mainClassName = "tiddly.TiddlyAppKt"

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    compile "org.jooby:jooby-lang-kotlin"
    compile "org.jooby:jooby-netty"
    compile "org.jooby:jooby-jackson"
    compile "org.jooby:jooby-rxjava"

    compile "org.mapdb:mapdb:$mapdbVersion"

    compile "io.netty:netty-tcnative-boringssl-static:${dependencyManagement.importedProperties['boringssl.version']}:${osdetector.classifier}"

    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    testCompile "com.nhaarman:mockito-kotlin:1.5.0"
    testCompile "org.jetbrains.spek:spek-api:$spekVersion"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"

    testCompile "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"


    testCompile "org.amshove.kluent:kluent:1.23"
    testCompile "io.rest-assured:rest-assured:3.0.5"
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.3'

//    testCompile 'com.natpryce:hamkrest:1.4.2.2'

    integrationTestCompile "org.seleniumhq.selenium:selenium-java:3.11.0"
    integrationTestCompile "org.seleniumhq.selenium.fluent:fluent-selenium:1.19"
    integrationTestCompile "io.github.bonigarcia:webdrivermanager:2.1.0"

    testCompile "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
}

/** We diverge from the default resources structure to adopt the Jooby standard: */
sourceSets.main.resources {
    srcDirs = ["conf", "public"]
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test.afterSuite { TestDescriptor td, TestResult tr ->
    if (td.parent)
        return

    logger.lifecycle("=================================")
    logger.lifecycle("Tests count:\t\t{}", tr.testCount)
    logger.lifecycle("Succeeded:\t\t{}", tr.successfulTestCount)
    logger.lifecycle("Skipped:\t\t{}", tr.skippedTestCount)
    logger.lifecycle("Failed:\t\t\t{}", tr.failedTestCount)
    logger.lifecycle("=================================")
}

test {
    failFast = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    useJUnitPlatform {
    }

    onOutput { descriptor, event ->
        if (event.destination == TestOutputEvent.Destination.StdErr) {
            logger.error(event.message)
        }
    }
}

task serviceTest(type: Test) {
    // Runs tests from src/integrationTest
    testClassesDirs = sourceSets.serviceTest.output.classesDirs
    classpath = sourceSets.serviceTest.runtimeClasspath
}

serviceTest {
    failFast = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    useJUnitPlatform {
    }
}

task integrationTest(type: Test) {
    // Runs tests from src/integrationTest
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest {
    failFast = true

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
    }

    useJUnitPlatform {
    }
}

check.dependsOn serviceTest
check.dependsOn integrationTest
//integrationTest.dependsOn serviceTest

serviceTest.mustRunAfter test
integrationTest.mustRunAfter serviceTest

